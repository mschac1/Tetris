/*
 * VGame.java
 *
 * Created on March 16, 2005, 3:12 PM
 */
package tetris;

import java.awt.Color;
import javax.swing.*;
/**
 *
 * @author  Menachem & Shira
 */
public class VGame extends javax.swing.JFrame
                    implements Display {
    
    /** Creates new form VGame */
    public VGame() {
        initComponents();
        initMyComponents();

        newGame();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        VPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tetris");
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        VPanel.setLayout(null);

        VPanel.setBackground(new java.awt.Color(255, 255, 255));
        VPanel.setAlignmentX(500.0F);
        VPanel.setPreferredSize(new java.awt.Dimension(300, 600));
        getContentPane().add(VPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        int kc = evt.getKeyCode();
        
        if (kc == evt.VK_DOWN) {
            game.moveDown();
        }
        else if (kc == evt.VK_LEFT) {
            game.moveLeft();
        }
        else if (kc == evt.VK_RIGHT) {
            game.moveRight();
        }
        else if (kc == evt.VK_W || kc == evt.VK_ENTER) {
            game.RotateClockWise();
        }
        else if (kc == evt.VK_Q) {
            game.RotateCounterClockWise();
        }
        else if (kc == evt.VK_ESCAPE) {
            System.exit(0);
        }
        else if (kc == evt.VK_N) {
            game.newGame();
        }
        else if (kc == evt.VK_P || kc == evt.VK_SPACE) {
            if (game.isPaused()) {
                game.unpause();
            }
            else {
                game.pause();
            }
        }
//Cheat        
        else if (kc > evt.VK_0 && kc < evt.VK_8) {
            game.nextShapeNum = kc - evt.VK_0;
        }
        else if (kc == evt.VK_L) {
            game.neededLines = 1;
        }
// Speeds
        else if (kc == evt.VK_MINUS) {
            game.delay += 100;
            game.timer.setDelay(game.delay);
        }
        else if (kc == evt.VK_EQUALS) {
            game.delay -= 100;
            game.timer.setDelay(game.delay);
        }

    }//GEN-LAST:event_formKeyPressed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped
    
    private void initMyComponents() {
        game = new Game((Display) this);
        
        VPanel.setPreferredSize(new java.awt.Dimension((bWidth + 4)* blockSize , bHeight * blockSize));

        vBlocks = new javax.swing.JLabel[bWidth][bHeight];

        javax.swing.JLabel block;
        for (int x = 0; x < bWidth; x++) {
            for (int y = 0; y < bHeight; y++) {
                block = vBlocks[x][y] = new javax.swing.JLabel();
                block.setOpaque(true);
//                VPanel.add(block, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + (blockSize * x), blockSize * bHeight - blockSize * (y + 1), blockSize, blockSize));
                block.setBounds(bLeft + (blockSize * x), blockSize * bHeight - blockSize * (y + 1), blockSize, blockSize);
                VPanel.add(block);
            }
        }

        shapePrev = new javax.swing.JLabel[4][4];
        for (int x = 0; x < 4; x++) {
            for (int y = 0; y < 4; y++) {
                block = shapePrev[x][y] = new javax.swing.JLabel();
                block.setOpaque(true);
 //               VPanel.add(block, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + blockSize * (x + bWidth), blockSize * 4 - blockSize * (y + 1), blockSize, blockSize));
                block.setBounds(bLeft + blockSize * (x + bWidth), blockSize * 4 - blockSize * (y + 1), blockSize, blockSize);
                VPanel.add(block);
            }
        }
        
        score = new JLabel();
        score.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
//        VPanel.add(score, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + blockSize * bWidth, blockSize * 4 , blockSize * 4, blockSize));
        score.setBounds(bLeft + blockSize * bWidth, blockSize * 4 , blockSize * 4, blockSize);
        VPanel.add(score);

        lines = new JLabel();
        lines.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
//        VPanel.add(lines, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + blockSize * bWidth, blockSize * 6 , blockSize * 4, blockSize));
        lines.setBounds(bLeft + blockSize * bWidth, blockSize * 6 , blockSize * 4, blockSize);
        VPanel.add(lines);

        level = new JLabel();
        level.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
//        VPanel.add(level, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + blockSize * bWidth, blockSize *8, blockSize * 4, blockSize));
        level.setBounds(bLeft + blockSize * bWidth, blockSize *8, blockSize * 4, blockSize);
        VPanel.add(level);
        
        neededLines = new JLabel();
        neededLines.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
//        VPanel.add(neededLines, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + blockSize * bWidth, blockSize * 10 , blockSize * 4, blockSize));
        neededLines.setBounds(bLeft + blockSize * bWidth, blockSize * 10 , blockSize * 4, blockSize); 
        VPanel.add(neededLines);

        scores = new JLabel();
        scores.setVerticalAlignment(javax.swing.SwingConstants.TOP);
//        VPanel.add(scores, new org.netbeans.lib.awtextra.AbsoluteConstraints(bLeft + blockSize * bWidth + (int) (blockSize * .25), blockSize * 13 , blockSize * 4, blockSize * game.numScores * 2));
        scores.setBounds(bLeft + blockSize * bWidth + (int) (blockSize * .25), blockSize * 13 , blockSize * 4, blockSize * game.numScores * 2);
        VPanel.add(scores);
        
        pack();       
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VGame().setVisible(true);
            }
        });
        
    }

    private void newGame() {
        game.newGame();
    }

    public void update()  {
        for (int x = 0; x < bWidth; x++) {
            for (int y = 0; y < bHeight; y++) {
                 vBlocks[x][y].setBackground(colors[game.blocks[x][y]]);
                 if (game.blocks[x][y] != 0) {
                     vBlocks[x][y].setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
                 }
                 else {
                     vBlocks[x][y].setBorder(null);
                 }
            }
        }

        // Shape preview
        Shape shape = Shape.shapes[game.nextShapeNum];

        for (int i = 0; i < game.nextShapePos; i++)
            shape = shape.RotateClockWise();

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                shapePrev[i][j].setBackground(Color.WHITE);
                shapePrev[i][j].setBorder(null);
            }
        }
        for (int i = 0; i < 4; i++) {
                 shapePrev[shape.blocks[i].x][shape.blocks[i].y].setBackground(colors[game.nextShapeNum]);
                 shapePrev[shape.blocks[i].x][shape.blocks[i].y].setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        }
        
        score.setText("score: " + game.score);
        lines.setText("lines: " + game.numLines);
        level.setText("level: " + game.level);
        neededLines.setText("Lines to next level: " + game.neededLines);
        
    }
    public void updateScores() {
        String strScores = "<html> High Scores<br> <br>";
        String[][] scores = game.getHighScores();
            for (int i = 0; i < game.numScores; i++)
                strScores += (Integer.toString(i + 1) + ") " + scores[i][0] + " " + scores[i][1] + "<br> <br>");
        this.scores.setText(strScores);
        
    }
    
    public String getScorerName() {
        return JOptionPane.showInputDialog(this, "Congratulations! You have set a new high score. Please Enter your name");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel VPanel;
    // End of variables declaration//GEN-END:variables

    // My variables
    private javax.swing.JLabel proto;
    private javax.swing.JLabel vBlocks[][];
    private javax.swing.JLabel shapePrev[][];
    
    private JLabel scores;
    
    private JLabel score;
    private JLabel lines;
    private JLabel level;
    private JLabel neededLines;
    
    static final int blockSize = 35;
    static final int bHeight = Game.bHeight;
    static final int bWidth = Game.bWidth;
    static final int bLeft = 0;
    static final int bTop = 0;
   
    private java.awt.Color[] colors = {Color.BLACK, Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.ORANGE, Color.MAGENTA, Color.PINK};

    private Game game;
    
}
